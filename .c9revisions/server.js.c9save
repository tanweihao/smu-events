{"ts":1381427591111,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\nvar http = require('http');\nvar path = require('path');\n\nvar async = require('async');\nvar socketio = require('socket.io');\nvar express = require('express');\n\n//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\nvar router = express();\nvar server = http.createServer(router);\nvar io = socketio.listen(server);\n\nrouter.use(express.static(path.resolve(__dirname, 'client')));\nvar messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}\n\nserver.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":1931}]],"length":1931}
{"contributors":[],"silentsave":true,"ts":1381428727274,"patch":[[{"diffs":[[0,"r);\n"],[-1,"var io = socketio.listen(server);"],[0,"\n\nro"]],"start1":525,"start2":525,"length1":41,"length2":8},{"diffs":[[0,")));"],[-1,"\nvar messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}"],[0,"\n\nse"]],"start1":589,"start2":589,"length1":1120,"length2":8}]],"length":786,"saved":false}
{"ts":1381428729670,"patch":[[{"diffs":[[0,");\n\n"],[-1,"//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\n"],[0,"var "]],"start1":243,"start2":243,"length1":226,"length2":8}]],"length":568,"saved":false}
{"ts":1381428731928,"patch":[[{"diffs":[[0,");\n\n"],[-1,"var async = require('async');\nvar socketio = require('socket.io');\n"],[0,"var "]],"start1":141,"start2":141,"length1":75,"length2":8}]],"length":501,"saved":false}
{"ts":1381428734004,"patch":[[{"diffs":[[0,"re('path');\n"],[-1,"\n"],[0,"var express "]],"start1":132,"start2":132,"length1":25,"length2":24},{"diffs":[[0,"uter);\n\n"],[-1,"\n"],[0,"router.u"]],"start1":236,"start2":236,"length1":17,"length2":16}]],"length":499,"saved":false}
{"ts":1381428737309,"patch":[[{"diffs":[[0,"outer);\n"],[-1,"\n"],[0,"router.u"]],"start1":235,"start2":235,"length1":17,"length2":16}]],"length":498,"saved":false}
{"contributors":[],"silentsave":false,"ts":1382009281482,"patch":[[{"diffs":[[-1,"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\n"],[0,"var "]],"start1":0,"start2":0,"length1":92,"length2":4},{"diffs":[[0,"');\n"],[-1,"\n"],[0,"var "],[-1,"router"],[1,"url = require(\"url\");\n\nvar app"],[0," = e"]],"start1":86,"start2":86,"length1":19,"length2":42},{"diffs":[[0,"ver("],[-1,"router);\nrouter"],[1,"app);\napp"],[0,".use"]],"start1":165,"start2":165,"length1":23,"length2":17},{"diffs":[[0,"t')));\n\n"],[1,"// Epxress app configurations\napp.configure(function () {\n    app.use(app.router);\n    app.use(express.static(__dirname + '/client'));\n});\n\nvar args = {\n    app: app,\n    url: url\n};\n\n"],[0,"server.l"]],"start1":228,"start2":228,"length1":16,"length2":200},{"diffs":[[0,"og(\""],[-1,"Chat s"],[1,"S"],[0,"erver "],[-1,"liste"],[1,"run"],[0,"ning"]],"start1":543,"start2":543,"length1":25,"length2":18}]],"length":604,"saved":false}
